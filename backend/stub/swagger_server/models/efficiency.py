# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Efficiency(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, light: float=None, rem: float=None, deep: float=None, smoke: bool=None, exercise: int=None, efficiency: float=None):  # noqa: E501
        """Efficiency - a model defined in Swagger

        :param light: The light of this Efficiency.  # noqa: E501
        :type light: float
        :param rem: The rem of this Efficiency.  # noqa: E501
        :type rem: float
        :param deep: The deep of this Efficiency.  # noqa: E501
        :type deep: float
        :param smoke: The smoke of this Efficiency.  # noqa: E501
        :type smoke: bool
        :param exercise: The exercise of this Efficiency.  # noqa: E501
        :type exercise: int
        :param efficiency: The efficiency of this Efficiency.  # noqa: E501
        :type efficiency: float
        """
        self.swagger_types = {
            'light': float,
            'rem': float,
            'deep': float,
            'smoke': bool,
            'exercise': int,
            'efficiency': float
        }

        self.attribute_map = {
            'light': 'light',
            'rem': 'rem',
            'deep': 'deep',
            'smoke': 'smoke',
            'exercise': 'exercise',
            'efficiency': 'efficiency'
        }
        self._light = light
        self._rem = rem
        self._deep = deep
        self._smoke = smoke
        self._exercise = exercise
        self._efficiency = efficiency

    @classmethod
    def from_dict(cls, dikt) -> 'Efficiency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Efficiency of this Efficiency.  # noqa: E501
        :rtype: Efficiency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def light(self) -> float:
        """Gets the light of this Efficiency.

        Percentage of time in Light sleep  # noqa: E501

        :return: The light of this Efficiency.
        :rtype: float
        """
        return self._light

    @light.setter
    def light(self, light: float):
        """Sets the light of this Efficiency.

        Percentage of time in Light sleep  # noqa: E501

        :param light: The light of this Efficiency.
        :type light: float
        """

        self._light = light

    @property
    def rem(self) -> float:
        """Gets the rem of this Efficiency.

        Percentage of time in REM sleep  # noqa: E501

        :return: The rem of this Efficiency.
        :rtype: float
        """
        return self._rem

    @rem.setter
    def rem(self, rem: float):
        """Sets the rem of this Efficiency.

        Percentage of time in REM sleep  # noqa: E501

        :param rem: The rem of this Efficiency.
        :type rem: float
        """

        self._rem = rem

    @property
    def deep(self) -> float:
        """Gets the deep of this Efficiency.

        Percentage of time in Deep sleep  # noqa: E501

        :return: The deep of this Efficiency.
        :rtype: float
        """
        return self._deep

    @deep.setter
    def deep(self, deep: float):
        """Sets the deep of this Efficiency.

        Percentage of time in Deep sleep  # noqa: E501

        :param deep: The deep of this Efficiency.
        :type deep: float
        """

        self._deep = deep

    @property
    def smoke(self) -> bool:
        """Gets the smoke of this Efficiency.

        User's smoking status  # noqa: E501

        :return: The smoke of this Efficiency.
        :rtype: bool
        """
        return self._smoke

    @smoke.setter
    def smoke(self, smoke: bool):
        """Sets the smoke of this Efficiency.

        User's smoking status  # noqa: E501

        :param smoke: The smoke of this Efficiency.
        :type smoke: bool
        """

        self._smoke = smoke

    @property
    def exercise(self) -> int:
        """Gets the exercise of this Efficiency.

        Number of user's exercises per week  # noqa: E501

        :return: The exercise of this Efficiency.
        :rtype: int
        """
        return self._exercise

    @exercise.setter
    def exercise(self, exercise: int):
        """Sets the exercise of this Efficiency.

        Number of user's exercises per week  # noqa: E501

        :param exercise: The exercise of this Efficiency.
        :type exercise: int
        """

        self._exercise = exercise

    @property
    def efficiency(self) -> float:
        """Gets the efficiency of this Efficiency.

        Predicted sleep efficiency  # noqa: E501

        :return: The efficiency of this Efficiency.
        :rtype: float
        """
        return self._efficiency

    @efficiency.setter
    def efficiency(self, efficiency: float):
        """Sets the efficiency of this Efficiency.

        Predicted sleep efficiency  # noqa: E501

        :param efficiency: The efficiency of this Efficiency.
        :type efficiency: float
        """

        self._efficiency = efficiency
