# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Latest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: int=None, sleep_id: int=None, ts: str=None, temperature: float=None, humidity: float=None, heartrate: int=None):  # noqa: E501
        """Latest - a model defined in Swagger

        :param user_id: The user_id of this Latest.  # noqa: E501
        :type user_id: int
        :param sleep_id: The sleep_id of this Latest.  # noqa: E501
        :type sleep_id: int
        :param ts: The ts of this Latest.  # noqa: E501
        :type ts: str
        :param temperature: The temperature of this Latest.  # noqa: E501
        :type temperature: float
        :param humidity: The humidity of this Latest.  # noqa: E501
        :type humidity: float
        :param heartrate: The heartrate of this Latest.  # noqa: E501
        :type heartrate: int
        """
        self.swagger_types = {
            'user_id': int,
            'sleep_id': int,
            'ts': str,
            'temperature': float,
            'humidity': float,
            'heartrate': int
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'sleep_id': 'sleep_id',
            'ts': 'ts',
            'temperature': 'temperature',
            'humidity': 'humidity',
            'heartrate': 'heartrate'
        }
        self._user_id = user_id
        self._sleep_id = sleep_id
        self._ts = ts
        self._temperature = temperature
        self._humidity = humidity
        self._heartrate = heartrate

    @classmethod
    def from_dict(cls, dikt) -> 'Latest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Latest of this Latest.  # noqa: E501
        :rtype: Latest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> int:
        """Gets the user_id of this Latest.


        :return: The user_id of this Latest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this Latest.


        :param user_id: The user_id of this Latest.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def sleep_id(self) -> int:
        """Gets the sleep_id of this Latest.


        :return: The sleep_id of this Latest.
        :rtype: int
        """
        return self._sleep_id

    @sleep_id.setter
    def sleep_id(self, sleep_id: int):
        """Sets the sleep_id of this Latest.


        :param sleep_id: The sleep_id of this Latest.
        :type sleep_id: int
        """

        self._sleep_id = sleep_id

    @property
    def ts(self) -> str:
        """Gets the ts of this Latest.


        :return: The ts of this Latest.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts: str):
        """Sets the ts of this Latest.


        :param ts: The ts of this Latest.
        :type ts: str
        """

        self._ts = ts

    @property
    def temperature(self) -> float:
        """Gets the temperature of this Latest.


        :return: The temperature of this Latest.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this Latest.


        :param temperature: The temperature of this Latest.
        :type temperature: float
        """

        self._temperature = temperature

    @property
    def humidity(self) -> float:
        """Gets the humidity of this Latest.


        :return: The humidity of this Latest.
        :rtype: float
        """
        return self._humidity

    @humidity.setter
    def humidity(self, humidity: float):
        """Sets the humidity of this Latest.


        :param humidity: The humidity of this Latest.
        :type humidity: float
        """

        self._humidity = humidity

    @property
    def heartrate(self) -> int:
        """Gets the heartrate of this Latest.


        :return: The heartrate of this Latest.
        :rtype: int
        """
        return self._heartrate

    @heartrate.setter
    def heartrate(self, heartrate: int):
        """Sets the heartrate of this Latest.


        :param heartrate: The heartrate of this Latest.
        :type heartrate: int
        """

        self._heartrate = heartrate
