# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserRegisterBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, password: str=None, age: int=None, gender: str=None, smoke: bool=None, exercise: int=None):  # noqa: E501
        """UserRegisterBody - a model defined in Swagger

        :param username: The username of this UserRegisterBody.  # noqa: E501
        :type username: str
        :param password: The password of this UserRegisterBody.  # noqa: E501
        :type password: str
        :param age: The age of this UserRegisterBody.  # noqa: E501
        :type age: int
        :param gender: The gender of this UserRegisterBody.  # noqa: E501
        :type gender: str
        :param smoke: The smoke of this UserRegisterBody.  # noqa: E501
        :type smoke: bool
        :param exercise: The exercise of this UserRegisterBody.  # noqa: E501
        :type exercise: int
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'age': int,
            'gender': str,
            'smoke': bool,
            'exercise': int
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'age': 'age',
            'gender': 'gender',
            'smoke': 'smoke',
            'exercise': 'exercise'
        }
        self._username = username
        self._password = password
        self._age = age
        self._gender = gender
        self._smoke = smoke
        self._exercise = exercise

    @classmethod
    def from_dict(cls, dikt) -> 'UserRegisterBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The user_register_body of this UserRegisterBody.  # noqa: E501
        :rtype: UserRegisterBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this UserRegisterBody.


        :return: The username of this UserRegisterBody.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserRegisterBody.


        :param username: The username of this UserRegisterBody.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this UserRegisterBody.


        :return: The password of this UserRegisterBody.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UserRegisterBody.


        :param password: The password of this UserRegisterBody.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def age(self) -> int:
        """Gets the age of this UserRegisterBody.


        :return: The age of this UserRegisterBody.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this UserRegisterBody.


        :param age: The age of this UserRegisterBody.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def gender(self) -> str:
        """Gets the gender of this UserRegisterBody.


        :return: The gender of this UserRegisterBody.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this UserRegisterBody.


        :param gender: The gender of this UserRegisterBody.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def smoke(self) -> bool:
        """Gets the smoke of this UserRegisterBody.


        :return: The smoke of this UserRegisterBody.
        :rtype: bool
        """
        return self._smoke

    @smoke.setter
    def smoke(self, smoke: bool):
        """Sets the smoke of this UserRegisterBody.


        :param smoke: The smoke of this UserRegisterBody.
        :type smoke: bool
        """
        if smoke is None:
            raise ValueError("Invalid value for `smoke`, must not be `None`")  # noqa: E501

        self._smoke = smoke

    @property
    def exercise(self) -> int:
        """Gets the exercise of this UserRegisterBody.


        :return: The exercise of this UserRegisterBody.
        :rtype: int
        """
        return self._exercise

    @exercise.setter
    def exercise(self, exercise: int):
        """Sets the exercise of this UserRegisterBody.


        :param exercise: The exercise of this UserRegisterBody.
        :type exercise: int
        """
        if exercise is None:
            raise ValueError("Invalid value for `exercise`, must not be `None`")  # noqa: E501

        self._exercise = exercise
